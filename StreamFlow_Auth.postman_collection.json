{
  "info": {
    "_postman_id": "streamflow-auth",
    "name": "StreamFlow Auth",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Autenticación",
      "item": [
        {
          "name": "Login - Credenciales Correctas",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('rol');",
                  "    pm.expect(jsonData.user).to.not.have.property('password');",
                  "});",
                  "",
                  "if (jsonData && jsonData.token) {",
                  "    pm.environment.set(\"token\", jsonData.token);",
                  "    pm.environment.set(\"userId\", jsonData.user.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"admin@streamflow.com\",\n    \"password\": \"admin123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login - Credenciales Incorrectas",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message is correct\", function () {",
                  "    pm.expect(pm.response.json()).to.have.property('message', 'Credenciales inválidas');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"admin@streamflow.com\",\n    \"password\": \"password_incorrecta\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login - Usuario Eliminado",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message is correct\", function () {",
                  "    pm.expect(pm.response.json()).to.have.property('message', 'Usuario eliminado');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"usuario_eliminado@streamflow.com\",\n    \"password\": \"password123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Update Password - Contraseñas Coinciden",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Success message is correct\", function () {",
                  "    pm.expect(pm.response.json()).to.have.property('message', 'Contraseña actualizada exitosamente');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"currentPassword\": \"admin123\",\n    \"newPassword\": \"newpassword123\",\n    \"confirmPassword\": \"newpassword123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/usuarios/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "usuarios", "{{userId}}"]
            }
          }
        },
        {
          "name": "Update Password - Contraseñas No Coinciden",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message is correct\", function () {",
                  "    pm.expect(pm.response.json()).to.have.property('message', 'Las contraseñas no coinciden');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"currentPassword\": \"admin123\",\n    \"newPassword\": \"newpassword123\",\n    \"confirmPassword\": \"diferente_password\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/usuarios/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "usuarios", "{{userId}}"]
            }
          }
        },
        {
          "name": "Update Password - Contraseña Actual Incorrecta",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message is correct\", function () {",
                  "    pm.expect(pm.response.json()).to.have.property('message', 'Contraseña actual incorrecta');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"currentPassword\": \"password_incorrecta\",\n    \"newPassword\": \"newpassword123\",\n    \"confirmPassword\": \"newpassword123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/auth/usuarios/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "usuarios", "{{userId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Usuarios",
      "item": [
        {
          "name": "Create User - Datos Correctos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('nombre');",
                  "    pm.expect(jsonData).to.have.property('apellido');",
                  "    pm.expect(jsonData).to.have.property('rol');",
                  "    pm.expect(jsonData).to.not.have.property('password');",
                  "});",
                  "",
                  "if (jsonData && jsonData.id) {",
                  "    pm.environment.set(\"testUserId\", jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@streamflow.com\",\n    \"password\": \"test123\",\n    \"nombre\": \"Test\",\n    \"apellido\": \"User\",\n    \"rol\": \"Cliente\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"]
            }
          }
        },
        {
          "name": "Create User - Email Duplicado",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message is correct\", function () {",
                  "    pm.expect(pm.response.json()).to.have.property('message', 'El email ya está registrado');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"test@streamflow.com\",\n    \"password\": \"test123\",\n    \"nombre\": \"Test\",\n    \"apellido\": \"User\",\n    \"rol\": \"Cliente\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"]
            }
          }
        },
        {
          "name": "Get All Users - Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    pm.expect(pm.response.json()).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Users don't have password\", function () {",
                  "    const users = pm.response.json();",
                  "    users.forEach(user => {",
                  "        pm.expect(user).to.not.have.property('password');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/usuarios",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"]
            }
          }
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const user = pm.response.json();",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('nombre');",
                  "    pm.expect(user).to.have.property('apellido');",
                  "    pm.expect(user).to.have.property('rol');",
                  "    pm.expect(user).to.not.have.property('password');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/usuarios/{{testUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios", "{{testUserId}}"]
            }
          }
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated user data\", function () {",
                  "    const user = pm.response.json();",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('nombre', 'Test Updated');",
                  "    pm.expect(user).to.have.property('apellido', 'User Updated');",
                  "    pm.expect(user).to.have.property('rol');",
                  "    pm.expect(user).to.not.have.property('password');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"nombre\": \"Test Updated\",\n    \"apellido\": \"User Updated\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios/{{testUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios", "{{testUserId}}"]
            }
          }
        },
        {
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Success message is correct\", function () {",
                  "    pm.expect(pm.response.json()).to.have.property('message', 'Usuario eliminado exitosamente');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/usuarios/{{testUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios", "{{testUserId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Flujos de Prueba",
      "item": [
        {
          "name": "Flujo 1: Listar videos, registrar usuario, login y obtener video",
          "item": [
            {
              "name": "1. Listar Videos",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/videos",
                  "host": ["{{baseUrl}}"],
                  "path": ["videos"]
                }
              }
            },
            {
              "name": "2. Registrar Usuario Cliente",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"cliente@test.com\",\n    \"password\": \"cliente123\",\n    \"nombre\": \"Cliente\",\n    \"apellido\": \"Test\",\n    \"rol\": \"Cliente\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/usuarios",
                  "host": ["{{baseUrl}}"],
                  "path": ["usuarios"]
                }
              }
            },
            {
              "name": "3. Login Cliente",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "if (jsonData && jsonData.token) {",
                      "    pm.environment.set(\"token\", jsonData.token);",
                      "    pm.environment.set(\"userId\", jsonData.user.id);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"cliente@test.com\",\n    \"password\": \"cliente123\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "login"]
                }
              }
            },
            {
              "name": "4. Obtener Video por ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/videos/1",
                  "host": ["{{baseUrl}}"],
                  "path": ["videos", "1"]
                }
              }
            }
          ]
        },
        {
          "name": "Flujo 2: Login admin, ver facturas y marcar como pagada",
          "item": [
            {
              "name": "1. Login Administrador",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();",
                      "",
                      "if (jsonData && jsonData.token) {",
                      "    pm.environment.set(\"token\", jsonData.token);",
                      "    pm.environment.set(\"userId\", jsonData.user.id);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"admin@streamflow.com\",\n    \"password\": \"admin123\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/login",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "login"]
                }
              }
            },
            {
              "name": "2. Ver Todas las Facturas",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/facturas",
                  "host": ["{{baseUrl}}"],
                  "path": ["facturas"]
                }
              }
            },
            {
              "name": "3. Marcar Factura como Pagada",
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"estado\": \"Pagado\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/facturas/1",
                  "host": ["{{baseUrl}}"],
                  "path": ["facturas", "1"]
                }
              }
            }
          ]
        }
      ]
    }
  ]
} 